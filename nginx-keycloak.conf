http {

  init_by_lua_block  {
    function contains(table, element)
      if table ~= nil and element ~= nil then
        for _, value in pairs(table) do
          if value == element then
            return true
          end
        end
      end
      return false
    end
  }

  server {
    listen   80;

    location /another-service/ {

      access_by_lua_block {

        local opts = {
		      ssl_verify = "no",
		      scope = "openid email profile",
		      accept_none_alg = true,
          redirect_uri_path = "/another-service",
		      discovery = "https://account.test.ejectx.de/auth/realms/ejectx/.well-known/openid-configuration",
		      client_id = "ejectx",
		      client_secret = "31e0380b-b89a-41cb-98d9-7f2668047975",
		      redirect_uri_scheme = "http",
		      logout_path = "/logout",
          -- to provide keypass access on a different ip you need to change this ip
		      redirect_after_logout_uri = "https://account.test.ejectx.de/auth/realms/ejectx/protocol/openid-connect/logout",
		      redirect_after_logout_with_id_token_hint = false,
		      session_contents = {id_token=true}
		    }

        local res, err = require("resty.openidc").authenticate(opts)

        if err then
          ngx.status = 403
          ngx.say(err)
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end

        if not contains(res.id_token.groups, "expert") then
          ngx.status = 403
          ngx.exit(ngx.HTTP_FORBIDDEN)
        end
      }

      rewrite  ^/another-service/(.*)  /$1 break;
      proxy_pass_header Set-Cookie;
      proxy_pass_header Cookie;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
      proxy_redirect off;
      proxy_pass http://another-service;
    }
  }

}
