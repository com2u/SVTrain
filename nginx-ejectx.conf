server {
  listen 0.0.0.0:80 default_server;
  server_name localhost;

  resolver 8.8.8.8;

    access_by_lua_block {
      -- Helper function to convert a list to JSON and encode as base64
      local function list_to_base64(list)
        -- Convert the list to a JSON string
        local cjson = require "cjson"
        local json_str = cjson.encode(list)

        -- Encode the JSON string as base64
        local encoded_str = ngx.encode_base64(json_str)

        return encoded_str
      end

      local opts = {
        ssl_verify = "no",
        scope = "openid profile email roles",
        accept_none_alg = true,
        -- redirect_uri_path = "/",
        -- redirect_uri_scheme = "http",
        redirect_uri = "http://localhost:3333/manager",
        discovery = "https://account.test.ejectx.de/auth/realms/ejectx/.well-known/openid-configuration",
        client_id = "ejectx",
        client_secret = "31e0380b-b89a-41cb-98d9-7f2668047975",
        logout_path = "/logout",
        redirect_after_logout_uri = "https://account.test.ejectx.de/auth/realms/ejectx/protocol/openid-connect/logout",
        redirect_after_logout_with_id_token_hint = false,
        -- session_contents = {id_token=true}
      }

      local res, err = require("resty.openidc").authenticate(opts)

      if err then
        ngx.status = 403
        ngx.say(err)
        ngx.exit(ngx.HTTP_FORBIDDEN)
      end

      -- if not contains(res.id_token.groups, "expert") then
      --   ngx.status = 403
      --   ngx.exit(ngx.HTTP_FORBIDDEN)
      -- end

      -- Set the X-USERSESSION header
      ngx.req.set_header("X-USERSESSION", list_to_base64(res))
      ngx.header["X-USERSESSION"] = list_to_base64(res)
    }

  location / {
    proxy_pass        http://svtrain-ui:8080/;
    proxy_pass_header Set-Cookie;
    proxy_pass_header Cookie;
    proxy_pass_header X-USERSESSION;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;
    proxy_redirect off;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
  }

  location /api {

    proxy_pass http://svtrain-api:3333/api;
    proxy_pass_header Set-Cookie;
    proxy_pass_header Cookie;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;
    proxy_redirect off;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
  }

  location /api/data {

    proxy_pass http://svtrain-api:3333/data;
    proxy_pass_header Set-Cookie;
    proxy_pass_header Cookie;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_cache_bypass $http_upgrade;
    proxy_redirect off;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
  }
}
